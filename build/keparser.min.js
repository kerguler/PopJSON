require=(function(){function e(n,o,r){function s(t,i){if(!o[t]){if(!n[t]){var d="function"==typeof require&&require;if(!i&&d)return d(t,!0);if(a)return a(t,!0);var p=new Error("Cannot find module '"+t+"'");throw p.code="MODULE_NOT_FOUND",p}var l=o[t]={exports:{}};n[t][0].call(l.exports,function(e){var o=n[t][1][e];return s(o||e)},l,l.exports,e,n,o,r)}return o[t].exports}for(var a="function"==typeof require&&require,t=0;t<r.length;t++)s(r[t]);return s}return e})()({"PopJSON":[function(e,n,o){"use strict";let r='1.2.8',s={'ACC_FIXED':'d','ACC_ERLANG':'d','ACC_PASCAL':'d','AGE_FIXED':'i','AGE_CONST':'i','AGE_GAMMA':'i','AGE_NBINOM':'i','AGE_CUSTOM':'i','NOAGE_CONST':'i'},a={'NO_STEPPER':'0','AGE_STEPPER':'age_stepper','ACC_STEPPER':'acc_stepper'},t={'AGE_FIXED':['age_fixed_pars','age_hazard_calc','age_fixed_haz'],'AGE_CONST':['age_const_pars','age_const_calc','age_const_haz'],'AGE_GAMMA':['age_gamma_pars','age_hazard_calc','age_gamma_haz'],'AGE_NBINOM':['age_nbinom_pars','age_hazard_calc','age_nbinom_haz'],'NOAGE_CONST':['age_const_pars','age_const_calc','age_const_haz']};class i{constructor(){this.header="";this.model="";this.error="";this.json={}}check_ids(e){if(!/^[a-zA-Z][a-zA-Z0-9\_]+$/.test(e)){this.error+="Only numeric and alphanumeric characters and \"_\" are allowed in IDs. Also, IDs should be more than one character and start with an alphanumeric.\nViolating ID is "+e+"\n";return""}if(this.ids.includes(e)){this.error+="IDs should be unique! Please check "+e+"\n";return""}this.ids.push(e);return e}results(){return({"model":this.header+this.model,"error":this.error,"json":this.json})}parse_json(e){try{this.json=JSON.parse(e)}catch(e){this.error+="JSON parse error!\n";return(this.results())};this.parse();return(this.results())}process_json(e){this.json=e;this.parse();return(this.results())}handle_repeats(e,n="",o=0){let r="for",s=e.constructor();if(e.constructor==Object)Object.entries(e).forEach(([e,r])=>{s[e]=this.handle_repeats(r,n=n,o=o)});else if(e.constructor==Array){if(e[0]==r){if(e.length!=5){this.error+="Error in for loop construction!\n";this.model="";return{}}for(let a=e[2];a<=e[3];a++){let t=this.handle_repeats(e[4],n=e[1],o=a);if(t.constructor==Array&&e[4][0]==r){for(let e=0;e<t.length;e++)s.push(this.handle_repeats(t[e],n=n,o=o))}else s.push(t)}}else{for(let a=0;a<e.length;a++){let t=this.handle_repeats(e[a],n=n,o=o);if(t.constructor==Array&&e[a][0]==r){for(let e=0;e<t.length;e++)s.push(this.handle_repeats(t[e],n=n,o=o))}else s.push(t)}}}else if(e.constructor==String){if(n){var a=new RegExp("\\["+n+"\\]","g");s=e.replace(a,o)}else s=e}else s=e;return s}parse(){this.json=this.handle_repeats(this.json);let e=this;this.ids=[];this.deterministic=this.json.model.deterministic;('environ' in this.json)||(this.json.environ=[]);this.environs=this.json.environ.map(n=>e.check_ids(n.id));if(!('populations' in this.json)){this.json.populations=[];this.error+="Couldn't find any populations!\n";return(this.results())}this.populations=this.json.populations.map(n=>e.check_ids(n.id));this.popobj={};this.json.populations.forEach(n=>e.popobj[n.id]=n);this.processes=[];this.json.populations.forEach(n=>'processes' in n?n.processes.forEach(n=>{e.processes.push(e.check_ids(n.id))}):[]);this.processobj={};this.json.populations.forEach(n=>'processes' in n?n.processes.forEach(o=>{e.processobj[o.id]=o,e.processobj[o.id].parent_id=n.id}):{});('parameters' in this.json)||(this.json.parameters=[]);this.parametersv=this.json.parameters.filter(e=>!e.constant).map(n=>e.check_ids(n.id));this.parametersc=this.json.parameters.filter(e=>e.constant).map(e=>e.id);('functions' in this.json)||(this.json.functions=[]);this.functions=Object.keys(this.json.functions);('intermediates' in this.json)||(this.json.intermediates=[]);this.intermediates=this.json.intermediates.map(n=>e.check_ids(n.id));('transformations' in this.json)||(this.json.transformations=[]);this.transformations=this.json.transformations.map(n=>e.check_ids(n.id));('transfers' in this.json)||(this.json.transfers=[]);this.transfers=Array.from(new Set(this.json.transfers.map(n=>n.from in e.processobj?e.processobj[n.from].parent_id:n.from)));('migrations' in this.json)||(this.json.migrations=[]);this.json.migrations.forEach(n=>e.check_ids(n.id));this.migrations={};this.json.migrations.forEach((n,o)=>{let r=n.target.constructor==Array?n.target:[n.target];r.forEach((n,o)=>{if(e.populations.includes(n))e.migrations[n]=e.popobj[n];else if(e.processes.includes(n))e.migrations[n]=e.processobj[n];else{e.error+="Migration target should either be a population or a process!\nOffending target: "+n+"\n";e.model="";return{}}})});this.operations=["abs","min","max","round","poisson","binomial","define","?","&&","||",">=","<=",">","<","==","sqrt","pow","exp","log","log2","log10","indicator","index","size","count","*","+","-","/","%"];this.funparnames=["a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z","A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z"];this.funcountid=0;this.header="";this.model="";this.error||this.write_model()}write_model(){this.funcountid=0;this.header="";this.model="";this.write_warranty();this.write_header();this.write_functions();this.write_migrate();this.write_harvest();this.write_custom();this.write_init();this.write_parnames();this.write_destroy();this.write_sim();this.write_main()}write_warranty(){this.header+="/* \n";this.header+=" *  This code was automatically generated by PopJSON (v."+r+")\n";this.header+=" * \n";this.header+=" *  This program is free software: you can redistribute it and/or modify\n";this.header+=" *  it under the terms of the GNU General Public License as published by\n";this.header+=" *  the Free Software Foundation, either version 3 of the License, or\n";this.header+=" *  (at your option) any later version.\n";this.header+=" *\n";this.header+=" *  This program is distributed in the hope that it will be useful,\n";this.header+=" *  but WITHOUT ANY WARRANTY; without even the implied warranty of\n";this.header+=" *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n";this.header+=" *\n";this.header+=" *  See the GNU General Public License for more details:\n";this.header+=" *  <https://www.gnu.org/licenses/>\n";this.header+=" */\n";this.header+="\n"}write_header(){let e=this;this.json.model.type=="Population"&&(this.header+="#include <math.h>\n",this.header+="#include \"population.h\"\n",this.header+="\n",this.deterministic?this.json.model.type=="ODE"&&(this.header+="#include <stdlib.h>\n",this.header+="#include \"lsoda.h\"\n",this.header+="\n"):(this.header+="extern gsl_rng *RANDOM;\n",this.header+="\n"));this.header+="#define CHECK(x) (isnan(x) || isinf(x))\n";this.header+="\n";this.numpar=this.json.parameters.filter(e=>!e.constant).length;this.numpop=this.json.populations.length;this.numint_int=this.json.intermediates.length;this.numint_trans=this.json.transformations.length;this.numint=this.numint_int+this.numint_trans;this.numenv=this.environs.length;this.json.model.type=="Population"&&(this.json.populations.length==0?(this.numproc=0,this.numprocpar=0):(this.numproc=1+Math.max(...this.json.populations.map(e=>'processes' in e?e.processes.length:0)),this.numprocpar=Math.max(...this.json.populations.map((e,n)=>{let o=0;if(!('processes' in e))return o;e.processes.forEach(e=>{Array.isArray(e.value)?(o+=e.value.length):(o+=1)});return o}))));this.popart={};this.json.model.type=="Population"&&this.json.populations.forEach(n=>{(n.id in e.popart)||(e.popart[n.id]={}),n.processes.forEach(o=>{e.popart[n.id][o.arbiter]=s[o.arbiter]})});this.header+="#define NumPar "+String(this.numpar)+"\n";this.header+="#define NumPop "+String(this.numpop)+"\n";this.header+="#define NumInt "+String(this.numint)+"\n";this.header+="#define NumEnv "+String(this.numenv)+"\n";this.header+="\n";this.json.parameters.filter(e=>!e.constant).forEach((n,o)=>{e.header+="#define "+n.id+" "+String(o)+"\n"});this.header+="\n";this.json.model.type=="Population"&&(this.json.populations.forEach((n,o)=>{n.processes.forEach((n,o)=>{e.header+="#define "+n.id+" "+String(o)+"\n"})}),this.header+="\n");this.json.parameters.filter(e=>e.constant).forEach(n=>{e.header+="double "+n.id+" = "+String(n.value)+";\n"});this.header+="\n";this.header+="double dmin(double a, double b) { return a < b ? a : b; }\n";this.header+="double dmax(double a, double b) { return a > b ? a : b; }\n";this.header+="\n";this.header+="int TIME;\n";this.header+="int TIMEF;\n";this.header+="\n";this.header+="double *model_param;\n";'environ' in this.json&&(this.json.environ.forEach((n,o)=>{e.header+="double *envir_"+n.id+";\n"}),this.header+="\n");'transformations' in this.json&&(this.deterministic?this.json.transformations.map(e=>e.id).forEach(n=>{e.header+="double "+n+";\n"}):this.json.transformations.map(e=>e.id).forEach(n=>{e.header+="unsigned int "+n+";\n"}));'intermediates' in this.json&&(this.json.intermediates.forEach((n,o)=>{e.header+="double "+n.id+";\n"}),this.header+="\n");'migrations' in this.json&&(this.json.migrations.forEach(n=>{e.header+="double tprob_"+n.id+"["+String(n.target.constructor==Array?Math.pow(n.target.length,2):1)+"];\n"}),this.header+="\n",this.write_tprobs())}write_functions(){let e=this;'functions' in this.json&&(Object.entries(this.json.functions).forEach(([n,o])=>{e.header+="#define "+n+e.parse_value(o)+"\n"}),this.header+="\n")}write_migrate(){if(!('migrations' in this.json))return;let e=this;var n,o;this.json.migrations.forEach(r=>{let s=0;r.target.forEach((a,t)=>{r.target.forEach((t,i)=>{e.header+="void fun_harvest_"+r.id+"_"+String(s)+"(number *key, number num, number *newkey, double *frac) {\n",o=e.json.populations.filter(e=>e.id==a)[0],o.processes.forEach((r,s)=>{n=e.popart[o.id][r.arbiter],e.header+="    newkey["+String(s)+"]."+n+"=key["+String(s)+"]."+n+";\n"}),e.header+="    *frac = tprob_"+r.id+"["+String(s)+"];\n",e.header+="}\n",e.header+="\n",s++})})})}write_harvest(){if(!('transfers' in this.json))return;let e=this;var n,o;this.json.transfers.forEach(r=>{e.header+="void fun_harvest_"+r.id+"(number *key, number num, number *newkey, double *frac) {\n",o=e.json.populations.filter(e=>e.id==r.to)[0],o.processes.forEach((s,a)=>{n=e.popart[o.id][s.arbiter],e.header+="    newkey["+String(a)+"]."+n+"="+e.parse_value(r.value[1][a],!0)+";\n"}),e.header+="    *frac = "+e.parse_value(r.value[0],!0)+";\n",e.header+="}\n",e.header+="\n"})}write_transfer(){if(!('transfers' in this.json))return;let e=this;var n,o;this.json.transfers.forEach(r=>{e.header+="void fun_transfer_"+r.id+"(number *key, number num, void *pop) {\n",e.header+="    number q["+String(e.numproc)+"] = {\n",o=e.json.populations.filter(e=>e.id==r.to)[0],o.processes.forEach((s,a)=>{n=e.popart[o.id][s.arbiter],e.header+="        {."+n+"="+e.parse_value(r.value[a],!0)+"},\n"}),e.header+="    };\n",e.header+="    spop2_add(*(population *)pop, q, num);\n",e.header+="}\n",e.header+="\n"})}write_custom(){let e=this;this.json.populations.forEach(n=>{if(!('processes' in n)||n.processes.length==0)return;n.processes.forEach(o=>{'hazard' in o&&(e.header+="double fun_hazard_"+o.id+"_"+n.id+"(hazard hfun, unsigned int d, number q, number k, double theta, const number *key) {\n",e.header+="    double devmn = "+e.parse_value(o.hazard[1],!0)+";\n",e.header+="    double devsd = "+e.parse_value(o.hazard[2],!0)+";\n",e.header+="    hazpar hz = "+t[o.hazard[0]][0]+"(devmn, devsd);\n",e.header+="    double a = "+t[o.hazard[0]][1]+"("+t[o.hazard[0]][2]+", 0, key["+o.id+"], hz.k, hz.theta, key);\n",e.header+="    return a;\n",e.header+="}\n",e.header+="\n"),'hazpar' in o&&o.hazpar&&(e.header+="void fun_hazpar_"+o.id+"_"+n.id+"(const number *key, const number num, double *par) {\n",o.value.forEach((n,o)=>{e.header+="    par["+String(o)+"] = "+e.parse_value(n,!0)+";\n"}),e.header+="}\n",e.header+="\n")})})}write_init(){this.model+="void init(int *no, int *np, int *ni, int *ne, int *st) {\n";this.json.model.type=="Population"&&(this.deterministic||(this.model+="    spop2_random_init();\n",this.model+="\n"),'istep' in this.json.model.parameters&&(this.model+="    spop2_set_eps("+String(this.json.model.parameters.istep)+");\n",this.model+="\n"));this.model+="    *no = NumPop;\n";this.model+="    *np = NumPar;\n";this.model+="    *ni = NumInt;\n";this.model+="    *ne = NumEnv;\n";this.model+="    *st = "+(this.deterministic?"0":"1")+";\n";this.model+="}\n";this.model+="\n"}write_parnames(){let e=this;this.model+="void parnames(char **names, double *param, double *parmin, double *parmax) {\n";this.model+="    char temp[NumPop+NumPar+NumInt+NumEnv][256] = {\n";this.numpop>0&&(this.model+="        \""+this.json.populations.map(e=>e.id).join("\", \"")+"\",\n");this.numpar>0&&(this.model+="        \""+this.json.parameters.filter(e=>!e.constant).map(e=>e.id).join("\", \"")+"\",\n");this.numint_int>0&&(this.model+="        \""+this.json.intermediates.map(e=>e.id).join("\", \"")+"\",\n");this.numint_trans>0&&(this.model+="        \""+this.json.transformations.map(e=>e.id).join("\", \"")+"\",\n");this.numenv>0&&(this.model+="        \""+this.environs.join("\", \"")+"\",\n");this.model+="    };\n";this.model+="\n";this.model+="    int i;\n";this.model+="    for (i=0; i<(NumPop+NumPar+NumInt+NumEnv); i++)\n";this.model+="        names[i] = strdup(temp[i]);\n";this.model+="\n";this.json.parameters.filter(e=>!e.constant).forEach((n,o)=>{e.model+="    param["+n.id+"] = "+String('value' in n?this.parse_value(n.value):0)+";\n",e.model+="    parmin["+n.id+"] = "+String('min' in n?this.parse_value(n.min):('value' in n?this.parse_value(n.value):0))+";\n",e.model+="    parmax["+n.id+"] = "+String('max' in n?this.parse_value(n.max):('value' in n?this.parse_value(n.value):0))+";\n"});this.model+="}\n";this.model+="\n"}write_destroy(){this.model+="void destroy(void) {\n";this.json.model.type=="Population"&&!this.deterministic&&(this.model+="    spop2_random_destroy();\n");this.model+="}\n";this.model+="\n"}write_out(e,n=!0){let o=this;this.deterministic?this.json.populations.forEach((n,r)=>{o.model+="    ".repeat(e)+"ret["+String(r)+"] = size_"+n.id+".d;\n"+"    ".repeat(e)+"if (CHECK(ret["+String(r)+"])) {goto endall;};\n"}):this.json.populations.forEach((n,r)=>{o.model+="    ".repeat(e)+"ret["+String(r)+"] = (double)(size_"+n.id+".i);\n"+"    ".repeat(e)+"if (CHECK(ret["+String(r)+"])) {goto endall;};\n"});this.model+="\n";this.model+="    ".repeat(e)+"ret += "+(String(this.json.populations.length))+";\n";this.model+="\n";n&&('intermediates' in this.json&&(this.json.intermediates.forEach((n,r)=>{o.model+="    ".repeat(e)+"iret["+String(r)+"] = "+n.id+";\n"+"    ".repeat(e)+"if (CHECK(iret["+String(r)+"])) {goto endall;};\n"}),this.model+="\n"),'transformations' in this.json&&(this.json.transformations.forEach((n,r)=>{o.model+="    ".repeat(e)+"iret["+String(this.json.intermediates.length+r)+"] = "+n.id+";\n"+"    ".repeat(e)+"if (CHECK(iret["+String(r)+"])) {goto endall;};\n"}),this.model+="\n"),'intermediates' in this.json&&(this.model+="    ".repeat(e)+"iret += "+(String(this.json.intermediates.length+this.json.transformations.length))+";\n"),this.model+="\n")}write_tprobs(){this.model+="void prepare_tprobs(int numcol, double *ttprobs, double *tprobs) {\n";this.model+="    int rA, rB, i = 0;\n";this.model+="    double sum;\n";this.model+="    for (i=0, rB=0; rB<numcol; rB++) {\n";this.model+="        sum = 1.0;\n";this.model+="        for (rA=0; rA<numcol; rA++, i++) {\n";this.model+="            tprobs[i] = sum <= 0.0 ? 1.0 : ttprobs[i] / sum;\n";this.model+="            sum -= ttprobs[i];\n";this.model+="        }\n";this.model+="    }\n";this.model+="}\n";this.model+="\n"}write_sim(){let e,n=this,o=this.deterministic?'DETERMINISTIC':'STOCHASTIC';this.model+="void sim(int tf, int rep, double *envir, double *pr, double *y0, const char *file0, const char *file1, double *ret, double *iret, int *success) {\n";this.model+="\n";this.model+="    TIME = 0;\n";this.model+="    TIMEF = tf;\n";this.model+="\n";this.model+="    model_param = pr;\n";'environ' in this.json&&(this.model+="\n",this.json.environ.forEach((e,o)=>{n.model+="    envir_"+e.id+" = envir + 1; envir += (int)round(*envir) + 1;\n"}),this.model+="\n");'migrations' in this.json&&(this.json.migrations.forEach(e=>{if(!(n.environs.includes(e.prob))){n.error+="Migration probability matrix is missing!\n";n.model="";return{}}let o=e.target.constructor==Array?e.target.length:1;n.model+="    prepare_tprobs("+o+", envir_"+e.prob+", tprob_"+e.id+");\n"}),this.model+="\n");this.json.model.type=="Population"&&(this.json.populations.forEach(e=>{n.model+="    population "+String(e.id)+";\n"}),this.model+="\n");this.json.model.type=="Population"&&(this.model+="    number num = numZERO;\n",this.model+="    char arbiters["+String(this.numproc)+"];\n",this.model+="    number key["+String(this.numproc)+"];\n",this.json.populations.forEach((e,o)=>{n.model+="    number size_"+e.id+";\n"}),this.json.populations.forEach((e,o)=>{if(e.processes.length==0)return;n.model+="    number completed_"+e.id+"["+String(n.numproc)+"];\n"}),this.json.populations.forEach((e,o)=>{n.transfers&&n.transfers.includes(e.id)&&n.populations.includes(e.id)&&(n.model+="    population popdone_"+e.id+"["+String(n.numproc)+"];\n")}),'migrations' in this.json&&Object.keys(this.migrations).forEach(e=>{n.model+="    population popdummy_"+e+";\n"}),'transformations' in this.json&&(this.deterministic?this.json.transformations.map(e=>e.id).forEach(e=>{n.model+="    "+e+" = 0.0;\n"}):this.json.transformations.map(e=>e.id).forEach(e=>{n.model+="    "+e+" = 0;\n"})),this.model+="    double par["+String(this.numprocpar)+"];\n",this.model+="\n",this.model+="    FILE *file;\n",this.model+="    number *buff = 0;\n",this.model+="    unsigned int buffsz = 0;\n",this.model+="    if (file0 && file0[0]!=' ') {\n",this.model+="        file = fopen(file0,\"rb\");\n",this.model+="        if (!file) {\n",this.model+="            *success = 0;\n",this.model+="            goto endall;\n",this.model+="        }\n",this.model+="        rewind(file);\n",this.model+="    }\n",this.model+="\n",this.model+="    if (file0 && file0[0]!=' ') {\n",this.json.populations.forEach((o,r)=>{n.model+="        fread(&buffsz, sizeof(unsigned int), 1, file);\n";n.model+="        buff = (number *)malloc(buffsz);\n";n.model+="        fread(buff, buffsz, 1, file);\n";n.model+="        "+o.id+" = spop2_loadstate(buff);\n";n.model+="\n";if(n.transfers&&n.transfers.includes(o.id)&&n.populations.includes(o.id)){for(e=0;e<n.numproc;e++)n.model+="        popdone_"+o.id+"["+String(e)+"] = spop2_loadstate_empty(buff);\n"}n.model+="\n";n.model+="        free(buff);\n";n.model+="\n"}),this.model+="    } else {\n",this.json.populations.forEach((r,s)=>{for(e=0;e<n.numproc;e++)n.model+="        arbiters["+String(e)+"] = "+(e<r.processes.length?r.processes[e].arbiter:"STOP")+";\n",n.model+="        key["+String(e)+"] = numZERO;\n";n.model+="        "+r.id+" = spop2_init(arbiters, "+o+");\n";for(e=0;e<n.numproc;e++){if(e<r.processes.length&&'stepper' in r.processes[e]){if(!(r.processes[e].stepper in a)){n.error+="Stepper not defined. Please choose one of these: "+Object.keys(a).join(", ")+"\n";break}n.model+="        "+r.id+"->arbiters["+String(e)+"]->fun_step = "+a[r.processes[e].stepper]+";\n"}if(e<r.processes.length){if('hazard' in r.processes[e]){if(!(r.processes[e].hazard[0] in t)){n.error+="Hazard not defined. Please choose one of these: "+Object.keys(t).join(", ")+"\n";break}n.model+="        "+r.id+"->arbiters["+String(e)+"]->fun_calc = fun_hazard_"+r.processes[e].id+"_"+r.id+";\n"}'hazpar' in r.processes[e]&&(n.model+="        "+r.id+"->arbiters["+String(e)+"]->fun_q_par = fun_hazpar_"+r.processes[e].id+"_"+r.id+";\n")}}n.model+="        if (y0["+String(s)+"]) { num."+("i",n.deterministic?"d":"i")+" = y0["+String(s)+"]; spop2_add("+r.id+", key, num); }\n";n.model+="\n";if(n.transfers&&n.transfers.includes(r.id)&&n.populations.includes(r.id)){for(e=0;e<n.numproc;e++)n.model+="        popdone_"+r.id+"["+String(e)+"] = spop2_init(arbiters, "+o+");\n"}this.model+="\n"}),n.model+="    }\n",this.model+="\n",this.model+="    if (file0 && file0[0]!=' ') {\n",this.model+="        fclose(file);\n",this.model+="    }\n",this.model+="\n",Object.keys(this.migrations).forEach(r=>{let s=n.popobj[r in n.popobj?r:n.processobj[r].parent_id];for(e=0;e<n.numproc;e++)n.model+="    arbiters["+String(e)+"] = "+(e<s.processes.length?s.processes[e].arbiter:"STOP")+";\n",n.model+="    key["+String(e)+"] = numZERO;\n";n.model+="    popdummy_"+r+" = spop2_init(arbiters, "+o+");\n";n.model+="\n"}));'intermediates' in this.json&&(this.json.intermediates.forEach((e,o)=>{n.model+="    "+e.id+" = 0.0;\n"}),this.model+="\n");this.json.populations.forEach((e,o)=>{n.model+="    size_"+e.id+" = spop2_size("+e.id+");\n"});this.model+="\n";this.write_out(1,!1);this.model+="    for (TIME=1; TIME<tf; TIME++) {\n";'intermediates' in this.json&&(this.json.intermediates.forEach(e=>{n.model+="        "+e.id+" = "+n.parse_value(e.value)+";\n"}),this.model+="\n");this.model+="        if (rep >= 0) {\n";if(this.json.model.type=="Population"){this.json.populations.forEach((o,r)=>{if(o.processes.length==0)return;let s=[];o.processes.forEach(e=>{Array.isArray(e.value)?e.value.forEach(n=>s.push('hazpar' in e&&e.hazpar?"0.0":n)):s.push('hazpar' in e&&e.hazpar?"0.0":e.value)});for(e=0;e<n.numprocpar;e++)n.model+="                par["+String(e)+"] = "+(s.length?n.parse_value(s.shift()):"0.0")+";\n";n.model+="                spop2_step("+o.id+", par, &size_"+o.id+", completed_"+o.id+", "+(n.transfers.includes(o.id)&&n.populations.includes(o.id)?"popdone_"+o.id:"0")+");\n";n.model+="\n"});'transformations' in this.json&&(this.json.transformations.forEach(o=>{'if' in o&&(n.model+="                if ("+n.parse_value(o['if'])+") {\n");n.model+="                "+o.id+" = "+n.parse_value(o.value)+";\n";n.model+="\n";if('to' in o){if('key' in o){var r=n.json.populations.filter(e=>e.id==o.to)[0];r.processes.forEach((e,s)=>{var a=n.popart[r.id][e.arbiter];n.model+="                key["+String(s)+"]."+a+" = "+n.parse_value(o.key[s])+";\n"})}else{for(e=0;e<n.numproc;e++)n.model+="                key["+String(e)+"] = numZERO;\n"}n.model+="                num"+(n.deterministic?".d":".i")+" = "+o.id+";\n";n.model+="                spop2_add("+o.to+", key, num);\n";n.model+="\n";n.deterministic?(n.model+="                size_"+o.to+".d += "+o.id+";\n"):(n.model+="                size_"+o.to+".i += "+o.id+";\n")}'if' in o&&(n.model+="                }\n")}),n.model+="\n");'transfers' in this.json&&(this.json.transfers.forEach(e=>{'if' in e&&(n.model+="                if ("+n.parse_value(e['if'])+") {\n");if(e.from in n.processobj)n.model+="                spop2_harvest(popdone_"+n.processobj[e.from].parent_id+"["+e.from+"], "+e.to+", fun_harvest_"+e.id+");\n";else if(n.populations.includes(e.from))n.model+="                spop2_harvest("+e.from+", "+e.to+", fun_harvest_"+e.id+");\n";else{n.error+="Error in defining the source population for transfer: "+e.from+"\n";return""}'if' in e&&(n.model+="                }\n")}),n.model+="\n",Array.from(new Set(this.json.transfers.map(e=>e.to))).forEach(e=>{n.model+="                size_"+e+" = spop2_size("+e+");\n"}),n.model+="\n");if('migrations' in this.json){let e=[];this.json.migrations.forEach(o=>{'if' in o&&(n.model+="                if ("+n.parse_value(o['if'])+") {\n");let r=0;o.target.forEach((s,a)=>{o.target.forEach((a,t)=>{n.model+="                spop2_harvest(",s in n.processobj?(n.model+="popdone_"+n.processobj[s].parent_id+"["+s+"]"):(n.model+=s,e.includes(s)||e.push(s)),n.model+=", popdummy_"+a+", fun_harvest_"+o.id+"_"+String(r)+");\n",r++})});'if' in o&&(n.model+="                }\n")});this.model+="\n";this.json.migrations.forEach(e=>{e.target.forEach((e,o)=>{e in n.processobj?(n.model+="                spop2_addpop(popdone_"+n.processobj[e].parent_id+"["+e+"], popdummy_"+e+");\n"):(n.model+="                spop2_addpop("+e+", popdummy_"+e+");\n")})});this.model+="\n";e.forEach(e=>{n.model+="                size_"+e+" = spop2_size("+e+");\n"});this.model+="\n";this.json.migrations.forEach(e=>{e.target.forEach((e,o)=>{e in n.processobj&&(n.model+="                spop2_empty(&popdone_"+n.processobj[e].parent_id+"["+e+"]);\n")})});this.model+="\n";this.json.migrations.forEach(e=>{e.target.forEach((e,o)=>{n.model+="                spop2_empty(&popdummy_"+e+");\n"})});this.model+="\n"}'transfers' in this.json&&this.transfers.forEach(o=>{for(e=0;e<n.numproc;e++)n.model+="                spop2_empty(&popdone_"+o+"["+String(e)+"]);\n";n.model+="\n"});n.model+="        }\n";n.model+="\n";this.write_out(2,!0)}this.model+="    }\n";this.model+="\n";this.model+="  endall:\n";this.model+="\n";this.model+="    *success = TIME;\n";this.model+="\n";this.model+="    if (file1 && file1[0]!=' ') {\n";this.model+="        file = fopen(file1,\"wb\");\n";this.model+="        if (!file) {\n";this.model+="            *success = 0;\n";this.model+="        } else {\n";this.model+="            rewind(file);\n";this.model+="\n";this.json.model.type=="Population"&&this.json.populations.forEach(e=>{n.model+="            buffsz = spop2_buffsize("+e.id+");\n",n.model+="            buff = spop2_savestate("+e.id+");\n",n.model+="            fwrite(&buffsz, sizeof(unsigned int), 1, file);\n",n.model+="            fwrite(buff, buffsz, 1, file);\n",n.model+="            free(buff);\n",n.model+="\n"});this.model+="            fclose(file);\n";this.model+="        }\n";this.model+="    }\n";this.model+="\n";this.json.model.type=="Population"&&(this.json.populations.forEach(o=>{n.model+="    spop2_free(&"+o.id+");\n";if(n.transfers&&n.transfers.includes(o.id)&&n.populations.includes(o.id)){for(e=0;e<n.numproc;e++)n.model+="    spop2_free(&(popdone_"+o.id+"["+String(e)+"]));\n"}}),'migrations' in this.json&&this.migrations&&Object.keys(this.migrations).forEach(e=>{n.model+="    spop2_free(&(popdummy_"+e+"));\n"}),this.model+="\n");this.model+="}\n";this.model+="\n"}write_main(){this.model+="int main(int argc, char *argv[]) {\n";this.model+="    return 0;\n";this.model+="}\n";this.model+="\n"}write_funcount(e,n){this.header+="char "+e+"(number *key) {\n";this.header+="    return "+n+";\n";this.header+="}\n";this.header+="\n"}parse_value(e,n=!1){let o=this;if(Array.isArray(e)){let r=this.parse_value(e[0],n=n);if(r=="define"){if(!(e[1].every(e=>o.funparnames.includes(e)))){this.error+="Error in function definition\nYou are allowed to use these as parameter names:\n"+o.funparnames+"\nERROR: "+r+" : "+e+"\n";return""}let s=this.parse_value(e[2],n=n);return"("+e[1].join(",")+") ("+s+")"}else if(r=="count"){let r=e[1];if(!o.json.populations.filter(e=>e.id==r)[0]){this.error+="Error in count request\nHere is the correct usage:\n[\"count\", \"population name\", [condition]]\n";return""}this.funcountid+=1;let s="fun_count_"+r+"_"+this.funcountid,a=this.parse_value(e[2],n=!0);this.write_funcount(s,a);return"spop2_count("+r+", "+s+")"+(this.deterministic?".d":".i")}else if(this.environs.includes(r)){let o=this.parse_value(e[1],n=n);return"envir_"+r+"["+o+"]"}else{let s=e.slice(1).map(e=>o.parse_value(e,n=n));if(r=="size"){return"size_"+s[0]+(this.deterministic?".d":".i")}else if(r=="index"){return s[0]+"["+s[1]+"]"}else if(r=="round"){return r+"("+s.join(", ")+")"}else if(r=="min"){return"dmin("+s.join(", ")+")"}else if(r=="max"){return"dmax("+s.join(", ")+")"}else if(r=="abs"){return"fabs("+s.join(", ")+")"}else if(this.functions.includes(r)||r=="exp"||r=="log"||r=="log2"||r=="log10"||r=="pow"||r=="sqrt"){return r+"("+s.join(", ")+")"}else if(r=="binomial"){return"(unsigned int)gsl_ran_binomial(RANDOM, "+s[0]+", "+s[1]+")"}else if(r=="poisson"){return"(unsigned int)gsl_ran_poisson(RANDOM, "+s[0]+")"}else if(r=="*"){return"("+s.join(" * ")+")"}else if(r=="+"){return"("+s.join(" + ")+")"}else if(r=="-"){return"("+s.join(" - ")+")"}else if(r=="/"){return"("+s.join(" / ")+")"}else if(r=="%"){return"(("+s[0]+") % ("+s[1]+"))"}else if(r=="?"){return"(("+s[0]+") ? ("+s[1]+") : ("+s[2]+"))"}else if(r=="&&"){return"("+s.join(" && ")+")"}else if(r=="||"){return"("+s.join(" || ")+")"}else if(r=="indicator"){return this.deterministic?"("+s[0]+" ? 1.0 : 0.0)":"("+s[0]+" ? 1 : 0)"}else if(r=="=="){return"("+s[0]+" == "+s[1]+")"}else if(r==">"){return"("+s[0]+" > "+s[1]+")"}else if(r=="<"){return"("+s[0]+" < "+s[1]+")"}else if(r==">="){return"("+s[0]+" >= "+s[1]+")"}else if(r=="<="){return"("+s[0]+" <= "+s[1]+")"}else{this.error+="Unknown keyword in equation\nERROR: "+r+" : "+e+"\n";return""}}}else{if(typeof e==='string'||e instanceof String){if(e in this.processobj){let o=this.processobj[e].parent_id;if(n){return"key["+e+"]."+this.popart[o][this.processobj[e].arbiter]}return"completed_"+o+"["+e+"]"+(this.deterministic?".d":".i")}else if(this.populations.includes(e)){if(n){return e}return"size_"+e+(this.deterministic?".d":".i")}else if(this.environs.includes(e)){return e}else if(this.parametersv.includes(e)){return"model_param["+e+"]"}else if(this.parametersc.includes(e)){return e}else if(this.functions.includes(e)){return e}else if(this.intermediates.includes(e)){return e}else if(this.transformations.includes(e)){return e}else if(this.operations.includes(e)){return e}else if(this.funparnames.includes(e)){return"("+e+")"}else if(e=="TIME"){return"TIME"}else if(e=="TIME_1"){return"(TIME-1)"}else if(e=="TIMEF"){return"TIMEF"}else if(!isNaN(parseFloat(e))){return e}else if(!isNaN(parseInt(e))){return e}else{this.error+="Unknown reference to a user defined keyword\nERROR: "+e+"\n";return""}}else if(typeof e==='number'){return e.toString()}else{this.error+="ERROR: Invalid value encountered: "+e+"\n";return""}}}}o.PopJSON=i},{}]},{},["PopJSON"])
